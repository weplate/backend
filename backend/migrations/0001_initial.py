# Generated by Django 4.0.1 on 2022-02-23 03:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='LogTextFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('feedback', models.CharField(max_length=512, verbose_name='Feedback')),
            ],
        ),
        migrations.CreateModel(
            name='MealItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('station', models.CharField(max_length=64)),
                ('graphic', models.FileField(null=True, upload_to='assets/meal_items/')),
                ('portion_weight', models.FloatField(verbose_name='Portion Weight (g)')),
                ('portion_volume', models.FloatField(verbose_name='Portion Volume (ml)')),
                ('ingredients', models.ManyToManyField(to='backend.Ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='NutritionalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='No Name', max_length=64)),
                ('calories', models.FloatField(default=0, verbose_name='Calories (cal)')),
                ('carbohydrate', models.FloatField(default=0, verbose_name='Carbohydrates (g)')),
                ('protein', models.FloatField(default=0, verbose_name='Protein (g)')),
                ('total_fat', models.FloatField(default=0, verbose_name='Total Fat (g)')),
                ('saturated_fat', models.FloatField(default=0, verbose_name='Saturated Fat (g)')),
                ('trans_fat', models.FloatField(default=0, verbose_name='Trans Fat (g)')),
                ('sugar', models.FloatField(default=0, verbose_name='Sugar (g)')),
                ('cholesterol', models.FloatField(default=0, verbose_name='Cholesterol (mg)')),
                ('fiber', models.FloatField(default=0, verbose_name='Dietary Fiber (g)')),
                ('sodium', models.FloatField(default=0, verbose_name='Sodium (mg)')),
                ('potassium', models.FloatField(default=0, verbose_name='Potassium (mg)')),
                ('calcium', models.FloatField(default=0, verbose_name='Calcium (mg)')),
                ('iron', models.FloatField(default=0, verbose_name='Iron (mg)')),
                ('vitamin_d', models.FloatField(default=0, verbose_name='Vitamin D (IU)')),
                ('vitamin_c', models.FloatField(default=0, verbose_name='Vitamin C (mg)')),
                ('vitamin_a', models.FloatField(default=0, verbose_name='Vitamin A (RE)')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('height', models.FloatField(verbose_name='Height (cm)')),
                ('weight', models.FloatField(verbose_name='Weight (kg)')),
                ('birthdate', models.DateField(verbose_name='Birthdate')),
                ('meals', models.JSONField(verbose_name='Meals Eaten')),
                ('meal_length', models.FloatField(verbose_name='Meal Length (minutes)')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=64, verbose_name='Sex')),
                ('health_goal', models.CharField(choices=[('lose_weight', 'Lose Weight'), ('build_muscle', 'Build Muscle'), ('athletic_performance', 'Athletic Performance'), ('improve_tone', 'Improve Body Tone'), ('improve_health', 'Improve Health')], max_length=64, verbose_name='Health Goal')),
                ('activity_level', models.CharField(choices=[('mild', 'Mild Activity'), ('moderate', 'Moderate Activity'), ('heavy', 'Heavy or Labour Intensive Activity'), ('extreme', 'Extreme Activity')], max_length=64, verbose_name='Activity Level')),
                ('grad_year', models.IntegerField()),
                ('allergies', models.ManyToManyField(blank=True, to='backend.Ingredient')),
                ('ban', models.ManyToManyField(blank=True, related_name='ban', to='backend.MealItem')),
                ('favour', models.ManyToManyField(blank=True, related_name='favour', to='backend.MealItem')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MealSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('group', models.CharField(default='default', max_length=64)),
                ('timestamp', models.DateTimeField()),
                ('items', models.ManyToManyField(to='backend.MealItem')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school')),
            ],
        ),
        migrations.AddField(
            model_name='mealitem',
            name='nutrition',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.nutritionalinfo'),
        ),
        migrations.AddField(
            model_name='mealitem',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school'),
        ),
        migrations.CreateModel(
            name='LogSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('track_duration', models.DurationField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.studentprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LogMealItemVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('liked', models.BooleanField(verbose_name='Liked (True/False)')),
                ('meal_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.mealitem')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.studentprofile')),
            ],
        ),
        migrations.CreateModel(
            name='LogMealChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('small1_portion', models.FloatField(verbose_name='Section A Size (mL)')),
                ('small2_portion', models.FloatField(verbose_name='Section B Size (mL)')),
                ('large_portion', models.FloatField(verbose_name='Section C Size (mL)')),
                ('large', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meal_item_large', to='backend.mealitem')),
                ('meal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.mealselection')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.studentprofile')),
                ('small1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meal_item_small_1', to='backend.mealitem')),
                ('small2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meal_item_small_2', to='backend.mealitem')),
            ],
        ),
        migrations.AddField(
            model_name='ingredient',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.school'),
        ),
    ]
